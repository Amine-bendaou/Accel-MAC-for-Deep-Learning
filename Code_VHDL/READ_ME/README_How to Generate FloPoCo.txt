===========================================================
              How to Generate FloPoCo Operators
===========================================================

This guide explains how to manually generate floating-point operators
(Addition, Multiplication, Multiply-Accumulate) using FloPoCo.

These commands are typically run from the terminal.

-----------------------------------------------------------
‚öôÔ∏è General Syntax:
-----------------------------------------------------------

    flopoco <Operator> wE=<EXP_WIDTH> wF=<MANT_WIDTH> frequency=<FREQ> name=<ENTITY_NAME>

Where:
    - <Operator>     = The type of block (e.g. IEEEFPAdd, FPMult, IEEEFPFMA)
    - <EXP_WIDTH>    = Width of the exponent (e.g. 5)
    - <MANT_WIDTH>   = Width of the mantissa (e.g. 10)
    - <FREQ>         = Target frequency in MHz (e.g. 300)
    - <ENTITY_NAME>  = Name given to the VHDL entity (e.g. FPAdd16)


-----------------------------------------------------------
‚ûï Floating-Point Addition (IEEE 754)
-----------------------------------------------------------

Command:
    flopoco IEEEFPAdd wE=5 wF=10 frequency=300 name=FPAdd16

Description:
    Generates a floating-point adder named `FPAdd16` with:
        - Exponent width = 5 bits
        - Mantissa width = 10 bits
        - Target frequency = 300 MHz


-----------------------------------------------------------
‚úñÔ∏è Floating-Point Multiplication
-----------------------------------------------------------

Command:
    flopoco FPMult wE=5 wF=10 frequency=300 name=FPMult16

Description:
    Generates a floating-point multiplier named `FPMult16` with:
        - Exponent width = 5 bits
        - Mantissa width = 10 bits
        - Target frequency = 300 MHz


-----------------------------------------------------------
üîÅ Floating-Point Multiply-Accumulate (MAC)
-----------------------------------------------------------

Command:
    flopoco IEEEFPFMA wE=5 wF=10 frequency=300 name=FPMAC16

Description:
    Generates a floating-point Fused Multiply-Add block named `FPMAC16` with:
        - Exponent width = 5 bits
        - Mantissa width = 10 bits
        - Target frequency = 300 MHz

    Note:
        Fused Multiply-Add computes (A * B + C) with a single rounding,
        which improves performance and accuracy.

-----------------------------------------------------------
üìù Notes:
-----------------------------------------------------------

- After running the command, FloPoCo creates a `flopoco.vhdl` file containing
  the generated operator.

- You can rename and move this file as needed, or use scripts to integrate it
  into your project (e.g., `generate_vhdl.py` will do this automatically).

- Ensure `flopoco` is installed and accessible from your PATH.

- The final report generated by FloPoCo includes **timing and pipeline info**.
  For example:

      Entity FPAdd16
         R: (c5, 2.921026ns)

  ‚Üí This means the output is ready after 5 pipeline cycles.
    You can use this value when defining latencies in your testbenches or wrappers.
    
-To test your FloPoCo code in either the Test Bench or Implementation mode, add the top-level file located at:
/home/intern/Bendaou/stage_2025/Top level text file flopoco.

Then, select the appropriate top-level configuration based on whether you're testing with a single value or with 16 values.
If you're using the 16-value configuration, make sure to adjust the latency by setting the correct value, which can be found in the final FloPoCo report.

===========================================================

