OBJECTIVE:

This script automates the generation of synthesizable VHDL files for both:

    Custom-designed blocks (your own implementation)

    Blocks generated by FloPoCo (e.g., floating-point add/mult/MAC)

DIRECTORY STRUCTURE:

project/
├── generate_vhdl.py ← Python script to launch generation
├── template/ ← Contains VHDL template files
│ ├── top_add_template.vhd
│ ├── top_mult_template.vhd
│ ├── top_mac_template.vhd
│ ├── top_flopoco_fpadd_template.vhd
│ ├── top_flopoco_fpmult_template.vhd
│ └── top_flopoco_fpmac_template.vhd
└── vhdl_files/
├── my_code/ ← Your custom VHDL top-level designs
│ ├── top_Add_Test.vhd
│ ├── top_Mult_Test.vhd
│ └── top_MAC_Test.vhd
└── flopoco/ ← FloPoCo VHDL + integrated top-levels
├── top_FPAdd_Test.vhd
├── top_FPMult_Test.vhd
└── top_FPMAC_Test.vhd
HOW TO GENERATE FILES:

From the project/ directory, run:
python3 generate_vhdl.py

The script will perform two main tasks:
(1) FLOPOCO BLOCKS:

    Calls FloPoCo using command line (e.g. flopoco IEEEFPAdd ...)

    Moves the generated flopoco.vhdl into a build directory

    Merges the generated code with a VHDL top-level template

    Saves the full file into: vhdl_files/flopoco/top_<Component>_Test.vhd

(2) CUSTOM BLOCKS:

    Loads your custom top-level template

    Replaces placeholders (e.g. {{ENTITY_NAME}}, {{EXP_WIDTH}}, etc.)

    Saves the result into: vhdl_files/my_code/top_<Block>_Test.vhd

PARAMETERS:

Inside generate_vhdl.py, you can customize each block like this:

Example for custom blocks:
{
"name": "Add",
"template": "top_add_template.vhd",
"exp_width": 5,
"mant_width": 10,
"DECAL": 29
}

Example for FloPoCo blocks:
{
"component": "FPMAC",
"template": "top_flopoco_fpmac_template.vhd",
"flopoco_cmd": "IEEEFPFMA",
"frequency": 500,
"exp_width": 5,
"mant_width": 10,
"MAC_LATENCY": 8,
"name": "FPMAC16"
}
