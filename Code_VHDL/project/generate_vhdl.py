import os
import subprocess
import sys
import re

# === CONFIGURATION ===

TEMPLATE_DIR = "template"
OUTPUT_DIR = "vhdl_files"
MYCODE_DIR = os.path.join(OUTPUT_DIR, "my_code")
FLOPOCO_DIR = os.path.join(OUTPUT_DIR, "flopoco")

# Blocs FloPoCo
flopoco_blocks = [
    {
        "component": "FPAdd",
        "template": "top_flopoco_fpadd_template.vhd",
        "flopoco_cmd": "IEEEFPAdd",
        "exp_width": 5,
        "mant_width": 10,
        "name": "FPAdd16"
    },
    {
        "component": "FPMult",
        "template": "top_flopoco_fpmult_template.vhd",
        "flopoco_cmd": "FPMult",
        "exp_width": 5,
        "mant_width": 10,
        "name": "FPMult16"
    },
    {
        "component": "FPMAC",
        "template": "top_flopoco_fpmac_template.vhd",
        "flopoco_cmd": "IEEEFPFMA",
        "exp_width": 5,
        "mant_width": 10,
        "name": "FPMAC16"
    }
]

# Personal Blocks
my_blocks = [
    {
        "name": "Add",
        "template": "top_add_template.vhd",
        "exp_width": 5,
        "mant_width": 10,
        "DECAL": 29
    },
    {
        "name": "Mult",
        "template": "top_mult_template.vhd",
        "exp_width": 5,
        "mant_width": 10
    },
    {
        "name": "Add_solo",
        "template": "top_add_solo_template.vhd",
        "exp_width": 5,
        "mant_width": 10,
        "DECAL": 29
    },
    {
        "name": "Mult_solo",
        "template": "top_mult_solo_template.vhd",
        "exp_width": 5,
        "mant_width": 10
    },
    {
        "name": "MAC",
        "template": "top_mac_template.vhd",
        "exp_width": 5,
        "mant_width": 10
    }
]

# === UTILS ===

def ensure_dirs():
    os.makedirs(MYCODE_DIR, exist_ok=True)
    os.makedirs(FLOPOCO_DIR, exist_ok=True)

def extract_mac_latency(stdout_text):
    """Extract yhe latency from the bloc FPMAC """
    pattern = r"Entity\s+FPMAC16\s+R:\s*\(c(\d+),"
    match = re.search(pattern, stdout_text)
    if match:
        return int(match.group(1))
    raise ValueError("‚ùå Impossible d'extraire la latence MAC depuis la sortie console.")

# === GENERATE FLOPOCO FILES ===

def run_flopoco(cfg, freq):
    """Run FloPoCo, capture stdout, read generated VHDL."""
    cfg["frequency"] = freq
    cmd = f"flopoco {cfg['flopoco_cmd']} wE={cfg['exp_width']} wF={cfg['mant_width']} frequency={cfg['frequency']} name={cfg['name']}"
    print(f"‚öôÔ∏è  G√©n√©ration : {cmd}")
    
    result = subprocess.run(
        cmd,
        shell=True,
        check=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT, 
        text=True
    )

    # Checking the generated file
    if not os.path.exists("flopoco.vhdl"):
        raise FileNotFoundError("‚ùå Fichier flopoco.vhdl introuvable apr√®s g√©n√©ration.")

    # Read VHDL code
    with open("flopoco.vhdl", "r") as f:
        cfg["flopoco_code"] = f.read()
    
    # Saving console output for latency extraction
    cfg["stdout"] = result.stdout

    # Clean the temporary file
    os.remove("flopoco.vhdl")

    return result.stdout

def generate_flopoco_file(cfg, freq, stdout=None):
    """Generate full top-level file including FloPoCo block."""
    template_path = os.path.join(TEMPLATE_DIR, cfg["template"])
    with open(template_path, "r") as f:
        top = f.read()

    top = top.replace("{{ENTITY_NAME}}", f"top_{cfg['component']}_Test")
    top = top.replace("{{COMPONENT_NAME}}", cfg["name"])
    top = top.replace("{{EXP_WIDTH}}", str(cfg["exp_width"]))
    top = top.replace("{{MANT_WIDTH}}", str(cfg["mant_width"]))
    top = top.replace("{{TOTAL_WIDTH_PLUS_3}}", str(cfg["exp_width"] + cfg["mant_width"] + 2))

    if cfg["component"] == "FPMAC":
        print("üß™ DEBUG : Sortie FloPoCo compl√®te :")
        print(stdout)  # üëà Ajout TEMPORAIRE pour voir la vraie sortie
        latency = extract_mac_latency(cfg["stdout"])
        top = top.replace("{{MAC_LATENCY}}", str(latency))


    full_code = top + "\n\n-- ========== Code generated by FloPoCo ==========\n\n" + cfg["flopoco_code"]
    output_path = os.path.join(FLOPOCO_DIR, f"top_{cfg['component']}_Test_{freq}MHz.vhd")

    with open(output_path, "w") as f:
        f.write(full_code)
    print(f"üìÑ Fichier g√©n√©r√© : {output_path}")

# === GENERATE MY OWN FILES ===

def generate_mycode_file(block):
    template_path = os.path.join(TEMPLATE_DIR, block["template"])
    output_path = os.path.join(MYCODE_DIR, f"top_{block['name']}_Test.vhd")

    with open(template_path, "r") as f:
        content = f.read()

    content = content.replace("{{ENTITY_NAME}}", f"top_{block['name']}_Test")
    content = content.replace("{{EXP_WIDTH}}", str(block["exp_width"]))
    content = content.replace("{{MANT_WIDTH}}", str(block["mant_width"]))
    if "DECAL" in block:
        content = content.replace("{{DECAL}}", str(block["DECAL"]))

    with open(output_path, "w") as f:
        f.write(content)
    print(f"üìÑ Fichier g√©n√©r√© : {output_path}")

# === MAIN ===

if __name__ == "__main__":
    if len(sys.argv) < 2 or sys.argv[1] not in ["FLOPOCO", "MYCODE"]:
        print("‚ùå Usage:")
        print("   - For FloPoCo: python3 generate_vhdl.py FLOPOCO <FREQ>")
        print("   - For MyCode : python3 generate_vhdl.py MYCODE")
        sys.exit(1)

    mode = sys.argv[1]

    ensure_dirs()

    if mode == "FLOPOCO":
        if len(sys.argv) != 3:
            print("‚ùå Please provide a frequency for FloPoCo generation.")
            sys.exit(1)

        freq = int(sys.argv[2])
        print(f"\nüîß [1] G√©n√©ration des blocs FloPoCo √† {freq} MHz...")
        for block in flopoco_blocks:
            stdout = run_flopoco(block, freq)
            generate_flopoco_file(block, freq, stdout)

        print(f"\n‚úÖ Tous les fichiers ont √©t√© g√©n√©r√©s avec succ√®s pour {freq} MHz.")

    elif mode == "MYCODE":
        print("\nüõ†Ô∏è  G√©n√©ration de tes blocs personnalis√©s uniquement...")
        for block in my_blocks:
            generate_mycode_file(block)

        print("\n‚úÖ Tous les fichiers personnalis√©s ont √©t√© g√©n√©r√©s avec succ√®s.")


